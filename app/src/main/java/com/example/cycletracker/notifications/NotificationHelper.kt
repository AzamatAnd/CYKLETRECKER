package com.example.cycletracker.notifications

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.example.cycletracker.MainActivity
import com.example.cycletracker.R

class NotificationHelper(private val context: Context) {
    
    companion object {
        private const val CHANNEL_ID_CYCLE = "cycle_notifications"
        private const val CHANNEL_ID_REMINDER = "reminder_notifications"
        private const val CHANNEL_ID_SHOPPING = "shopping_notifications"
        
        const val NOTIFICATION_ID_CYCLE_START = 1001
        const val NOTIFICATION_ID_CYCLE_SOON = 1002
        const val NOTIFICATION_ID_SHOPPING = 1003
        const val NOTIFICATION_ID_HEALTH_TIP = 1004
    }
    
    init {
        createNotificationChannels()
    }
    
    private fun createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            // –ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–∏–∫–ª–µ
            val cycleChannel = NotificationChannel(
                CHANNEL_ID_CYCLE,
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–∏–∫–ª–µ",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏ –ø—Ä–æ–≥–Ω–æ–∑–µ —Ü–∏–∫–ª–∞"
                enableLights(true)
                lightColor = android.graphics.Color.MAGENTA
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 500, 200, 500)
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            val reminderChannel = NotificationChannel(
                CHANNEL_ID_REMINDER,
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "–ü–æ–ª–µ–∑–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã"
                enableLights(true)
                lightColor = android.graphics.Color.CYAN
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–∫—É–ø–æ–∫
            val shoppingChannel = NotificationChannel(
                CHANNEL_ID_SHOPPING,
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –ø—Ä–æ–∫–ª–∞–¥–æ–∫ –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"
                enableLights(true)
                lightColor = android.graphics.Color.YELLOW
                enableVibration(true)
            }
            
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(cycleChannel)
            notificationManager.createNotificationChannel(reminderChannel)
            notificationManager.createNotificationChannel(shoppingChannel)
        }
    }
    
    fun showCycleStartNotification() {
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        }
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_CYCLE)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("üå∏ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞")
            .setContentText("–°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª. –ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–µ–±–µ!")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("–°–µ–≥–æ–¥–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ü–∏–∫–ª. –ù–µ –∑–∞–±—É–¥—å—Ç–µ:\n" +
                        "üíß –ü–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã\n" +
                        "üò¥ –ë–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å\n" +
                        "üßò –ò–∑–±–µ–≥–∞—Ç—å —Å—Ç—Ä–µ—Å—Å–∞"))
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setColor(0xFFE91E63.toInt())
            .build()
        
        showNotification(NOTIFICATION_ID_CYCLE_START, notification)
    }
    
    fun showCycleSoonNotification(daysUntil: Int) {
        val intent = Intent(context, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_CYCLE)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("üîÆ –°–∫–æ—Ä–æ –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞")
            .setContentText("–¶–∏–∫–ª –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ $daysUntil ${getDaysWord(daysUntil)}")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("–¶–∏–∫–ª –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ $daysUntil ${getDaysWord(daysUntil)}.\n\n" +
                        "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ:\n" +
                        "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø–∞—Å—ã –ø—Ä–æ–∫–ª–∞–¥–æ–∫\n" +
                        "‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ\n" +
                        "‚úÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—å—à–µ –¥–µ–ª"))
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setColor(0xFF9C27B0.toInt())
            .build()
        
        showNotification(NOTIFICATION_ID_CYCLE_SOON, notification)
    }
    
    fun showShoppingReminderNotification(daysUntil: Int) {
        val intent = Intent(context, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_SHOPPING)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("üõí –í—Ä–µ–º—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã!")
            .setContentText("–¶–∏–∫–ª —á–µ—Ä–µ–∑ $daysUntil ${getDaysWord(daysUntil)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫–ª–∞–¥–∫–∏!")
            .setStyle(NotificationCompat.BigTextStyle()
                .bigText("üõí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–∞—Ö\n\n" +
                        "–¶–∏–∫–ª –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ $daysUntil ${getDaysWord(daysUntil)}.\n\n" +
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ:\n" +
                        "‚Ä¢ –ü—Ä–æ–∫–ª–∞–¥–∫–∏/—Ç–∞–º–ø–æ–Ω—ã\n" +
                        "‚Ä¢ –û–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–∏–µ\n" +
                        "‚Ä¢ –ì—Ä–µ–ª–∫–∞\n" +
                        "‚Ä¢ –õ—é–±–∏–º—ã–µ —Å–Ω–µ–∫–∏ üç´\n\n" +
                        "–õ—É—á—à–µ –∫—É–ø–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ!"))
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setColor(0xFFFF9800.toInt())
            .addAction(
                R.drawable.ic_notification,
                "–ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ",
                pendingIntent
            )
            .build()
        
        showNotification(NOTIFICATION_ID_SHOPPING, notification)
    }
    
    fun showHealthTipNotification(tip: String, emoji: String = "üí°") {
        val intent = Intent(context, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_REMINDER)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("$emoji –°–æ–≤–µ—Ç –¥–Ω—è –æ—Ç –ú–∞—Ä–∏–∏")
            .setContentText(tip)
            .setStyle(NotificationCompat.BigTextStyle().bigText(tip))
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setColor(0xFF4CAF50.toInt())
            .build()
        
        showNotification(NOTIFICATION_ID_HEALTH_TIP, notification)
    }
    
    fun showMotivationalNotification() {
        val messages = listOf(
            "üåü –í—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã! –ü–æ–º–Ω–∏—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "üí™ –í–∞—à–µ —Ç–µ–ª–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ! –ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ –Ω—ë–º",
            "‚ú® –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤–æ–π",
            "üå∏ –í—ã –¥–µ–ª–∞–µ—Ç–µ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ!",
            "üíñ –õ—é–±–∏—Ç–µ —Å–µ–±—è —Ç–∞–∫–æ–π, –∫–∞–∫–∞—è –≤—ã –µ—Å—Ç—å"
        )
        
        val intent = Intent(context, MainActivity::class.java)
        val pendingIntent = PendingIntent.getActivity(
            context, 0, intent,
            PendingIntent.FLAG_IMMUTABLE or PendingIntent.FLAG_UPDATE_CURRENT
        )
        
        val notification = NotificationCompat.Builder(context, CHANNEL_ID_REMINDER)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç –ú–∞—Ä–∏–∏")
            .setContentText(messages.random())
            .setPriority(NotificationCompat.PRIORITY_LOW)
            .setContentIntent(pendingIntent)
            .setAutoCancel(true)
            .setColor(0xFFE91E63.toInt())
            .build()
        
        showNotification(NOTIFICATION_ID_HEALTH_TIP, notification)
    }
    
    private fun showNotification(id: Int, notification: android.app.Notification) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ActivityCompat.checkSelfPermission(
                    context,
                    Manifest.permission.POST_NOTIFICATIONS
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                return
            }
        }
        
        NotificationManagerCompat.from(context).notify(id, notification)
    }
    
    private fun getDaysWord(days: Int): String {
        return when {
            days % 10 == 1 && days % 100 != 11 -> "–¥–µ–Ω—å"
            days % 10 in 2..4 && days % 100 !in 12..14 -> "–¥–Ω—è"
            else -> "–¥–Ω–µ–π"
        }
    }
}
