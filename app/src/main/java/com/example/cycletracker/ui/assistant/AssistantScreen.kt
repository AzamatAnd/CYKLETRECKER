package com.example.cycletracker.ui.assistant

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.automirrored.filled.TrendingUp
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.scale
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.cycletracker.ui.CycleViewModel
import kotlinx.coroutines.delay

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AssistantScreen(viewModel: CycleViewModel, onNavigateBack: () -> Unit) {
    var isThinking by remember { mutableStateOf(false) }
    var showInsights by remember { mutableStateOf(false) }
    
    LaunchedEffect(Unit) {
        delay(500)
        showInsights = true
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("ü§ñ –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, "–ù–∞–∑–∞–¥")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0xFF6A1B9A),
                    titleContentColor = Color.White,
                    navigationIconContentColor = Color.White
                )
            )
        },
        containerColor = Color(0xFFFFF0F5)
    ) { padding ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // AI Avatar Card
            item {
                AnimatedVisibility(
                    visible = showInsights,
                    enter = fadeIn() + slideInVertically()
                ) {
                    AIAvatarCard()
                }
            }
            
            // Quick Stats
            item {
                AnimatedVisibility(
                    visible = showInsights,
                    enter = fadeIn() + slideInVertically()
                ) {
                    QuickStatsCard()
                }
            }
            
            // Personalized Insights
            item {
                Text(
                    text = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF6A1B9A)
                )
            }
            
            items(getPersonalizedInsights()) { insight ->
                AnimatedVisibility(
                    visible = showInsights,
                    enter = fadeIn() + slideInVertically()
                ) {
                    InsightCard(insight)
                }
            }
            
            // Recommendations
            item {
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF6A1B9A)
                )
            }
            
            items(getTodayRecommendations()) { recommendation ->
                AnimatedVisibility(
                    visible = showInsights,
                    enter = fadeIn() + slideInVertically()
                ) {
                    RecommendationCard(recommendation)
                }
            }
        }
    }
}

@Composable
fun AIAvatarCard() {
    val infiniteTransition = rememberInfiniteTransition(label = "pulse")
    val scale by infiniteTransition.animateFloat(
        initialValue = 1f,
        targetValue = 1.05f,
        animationSpec = infiniteRepeatable(
            animation = tween(2000, easing = EaseInOut),
            repeatMode = RepeatMode.Reverse
        ),
        label = "scale"
    )
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent
        ),
        elevation = CardDefaults.cardElevation(8.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(
                    Brush.linearGradient(
                        colors = listOf(
                            Color(0xFF6A1B9A),
                            Color(0xFF9C27B0),
                            Color(0xFFBA68C8)
                        )
                    )
                )
                .padding(24.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        .scale(scale)
                        .clip(CircleShape)
                        .background(Color.White.copy(alpha = 0.2f)),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "ü§ñ",
                        fontSize = 48.sp
                    )
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∞—Ä–∏—è",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.White
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Text(
                    text = "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫",
                    fontSize = 14.sp,
                    color = Color.White.copy(alpha = 0.9f)
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞—é —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã",
                    fontSize = 12.sp,
                    color = Color.White.copy(alpha = 0.8f),
                    textAlign = TextAlign.Center
                )
            }
        }
    }
}

@Composable
fun QuickStatsCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Column(
            modifier = Modifier.padding(20.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF6A1B9A)
                )
                
                Text(
                    text = "–¢–æ—á–Ω–æ—Å—Ç—å: 87%",
                    fontSize = 12.sp,
                    color = Color(0xFF4CAF50),
                    fontWeight = FontWeight.Bold
                )
            }
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                QuickStatItem("üìä", "3", "–¶–∏–∫–ª–∞")
                QuickStatItem("üìù", "12", "–ó–∞–ø–∏—Å–µ–π")
                QuickStatItem("üéØ", "87%", "–¢–æ—á–Ω–æ—Å—Ç—å")
            }
        }
    }
}

@Composable
fun QuickStatItem(emoji: String, value: String, label: String) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(text = emoji, fontSize = 32.sp)
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = value,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF6A1B9A)
        )
        Text(
            text = label,
            fontSize = 12.sp,
            color = Color.Gray
        )
    }
}

@Composable
fun InsightCard(insight: Insight) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(containerColor = Color.White),
        elevation = CardDefaults.cardElevation(4.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(CircleShape)
                    .background(insight.color.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = insight.icon,
                    contentDescription = null,
                    tint = insight.color,
                    modifier = Modifier.size(24.dp)
                )
            }
            
            Spacer(modifier = Modifier.width(16.dp))
            
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = insight.title,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = insight.description,
                    fontSize = 14.sp,
                    color = Color.Gray,
                    lineHeight = 20.sp
                )
                
                if (insight.tip != null) {
                    Spacer(modifier = Modifier.height(8.dp))
                    Box(
                        modifier = Modifier
                            .fillMaxWidth()
                            .background(
                                insight.color.copy(alpha = 0.1f),
                                RoundedCornerShape(8.dp)
                            )
                            .padding(12.dp)
                    ) {
                        Text(
                            text = "üí° ${insight.tip}",
                            fontSize = 13.sp,
                            color = insight.color,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun RecommendationCard(recommendation: Recommendation) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = recommendation.color.copy(alpha = 0.1f)
        ),
        elevation = CardDefaults.cardElevation(2.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = recommendation.emoji,
                fontSize = 32.sp
            )
            
            Spacer(modifier = Modifier.width(16.dp))
            
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = recommendation.title,
                    fontSize = 15.sp,
                    fontWeight = FontWeight.Bold,
                    color = recommendation.color
                )
                Spacer(modifier = Modifier.height(4.dp))
                Text(
                    text = recommendation.description,
                    fontSize = 13.sp,
                    color = Color.Gray
                )
            }
        }
    }
}

data class Insight(
    val icon: ImageVector,
    val title: String,
    val description: String,
    val tip: String?,
    val color: Color
)

data class Recommendation(
    val emoji: String,
    val title: String,
    val description: String,
    val color: Color
)

fun getPersonalizedInsights(): List<Insight> {
    return listOf(
        Insight(
            icon = Icons.AutoMirrored.Filled.TrendingUp,
            title = "–ü–∞—Ç—Ç–µ—Ä–Ω –æ–±–Ω–∞—Ä—É–∂–µ–Ω",
            description = "–í—ã —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –Ω–∞ 3-4 –¥–µ–Ω—å —Ü–∏–∫–ª–∞. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏–∑-–∑–∞ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            tip = "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–µ–Ω—å—à–µ –¥–µ–ª –≤ —ç—Ç–∏ –¥–Ω–∏ –∏ –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞–π—Ç–µ",
            color = Color(0xFF2196F3)
        ),
        Insight(
            icon = Icons.Default.Favorite,
            title = "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è",
            description = "–ü–æ—Å–ª–µ –ø—Ä–æ–≥—É–ª–æ–∫ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ –ª—É—á—à–µ –Ω–∞ 30%. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ–≥–∞–µ—Ç!",
            tip = "–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –≥—É–ª—è—Ç—å 20-30 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            color = Color(0xFFE91E63)
        ),
        Insight(
            icon = Icons.Default.Warning,
            title = "–ü—Ä–æ–≥–Ω–æ–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤",
            description = "–ß–µ—Ä–µ–∑ 2-3 –¥–Ω—è –≤–æ–∑–º–æ–∂–Ω—ã –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å 75% –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö).",
            tip = "–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –æ–±–µ–∑–±–æ–ª–∏–≤–∞—é—â–µ–µ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å—Ç—Ä–µ—Å—Å–∞",
            color = Color(0xFFFF9800)
        ),
        Insight(
            icon = Icons.Default.Star,
            title = "–õ—É—á—à–∏–µ –¥–Ω–∏ –≤–ø–µ—Ä–µ–¥–∏",
            description = "–° 10 –ø–æ 15 –¥–µ–Ω—å —Ü–∏–∫–ª–∞ —É –≤–∞—Å –æ–±—ã—á–Ω–æ –æ—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ –∏ –≤—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è!",
            tip = "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞ –Ω–∞ —ç—Ç–∏ –¥–Ω–∏",
            color = Color(0xFF4CAF50)
        )
    )
}

fun getTodayRecommendations(): List<Recommendation> {
    return listOf(
        Recommendation(
            emoji = "üíß",
            title = "–ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã",
            description = "–°–µ–≥–æ–¥–Ω—è –≤–∞–∂–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å",
            color = Color(0xFF2196F3)
        ),
        Recommendation(
            emoji = "üßò",
            title = "–õ—ë–≥–∫–∞—è –π–æ–≥–∞ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞",
            description = "–ü–æ–º–æ–∂–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            color = Color(0xFF9C27B0)
        ),
        Recommendation(
            emoji = "ü•ó",
            title = "–ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤",
            description = "–í–∏—Ç–∞–º–∏–Ω—ã –ø–æ–º–æ–≥—É—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ",
            color = Color(0xFF4CAF50)
        ),
        Recommendation(
            emoji = "üò¥",
            title = "–°–ø–∏—Ç–µ 7-8 —á–∞—Å–æ–≤",
            description = "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–æ–Ω –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω —Å–µ–π—á–∞—Å",
            color = Color(0xFFFF9800)
        )
    )
}
